1- json uses double quotes
2- jsonfiy
3- calling API from JS
============================
section 4

1- Api =  The main entry point for the application.

2- 202 code means delay the creating . obj takes long time

3- config  for authenticate:
            app.config['JWT_SECRET_KEY'] = 'super-secret'   # CHANGE IT
            jwt = JWTManager(app)  # OR ==> jwt = JWT(app, authenticate, identity)


4- testing on postman like that (NOT Bearer):
        key: Authorization
        value: jwt {token}


5- adding custom body request validation

 parser = reqparse.RequestParser()
 parser.add_argument(
            "price", type=float, required=True, help="price field can not left black",
        )   # adding custom validation on request body (go to string docs to read docs of class)
        parser.add_argument("item_name", type=str, required=True, help="item name field can not left black", )
        # todo : response like the following
        # {
        #     "message": {
        #         "item_name": "item name field can not left black"
        #     }
        # }

==============================================

section 5
1- delete first row
    Delete from users where rowid IN (Select rowid from users limit 1);

--------
2-


====================================================

section 6

resources is the logical part like views in django

2- test on postman


  var jsonData = JSON.parse(responseBody);
console.log(jsonData);
// console.log(responseBody)
console.log(jsonData.access_token)
tests["test jwt"] = jsonData.access_token !== undefined;  // like pytest
postman.setEnvironmentVariable("jwt", jsonData.access_token);



tests on postman


    var jsonData = JSON.parse(responseBody);
    console.log(jsonData);
    // console.log(responseBody)
    console.log(jsonData.access_token)
    // like pytest
    tests["access token was not empty jwt"] = jsonData.access_token !== undefined;

    // response time
    pm.test("Response time is less than 200ms", function () {
        pm.expect(pm.response.responseTime).to.be.below(200);
    });

    // set token
    pm.test("Status code is 200", function () {
        pm.response.to.have.status(200);
    });
    postman.setEnvironmentVariable("jwt", jsonData.access_token);



3- lazy = "dynamic"

# lazy ="dynamic" to make items query builder not items objs from ItemModel
===================================================

# path of sshkey
/c/Users/<username>/.ssh/id_rsa


=====================================

deployment on Heroku

1- Heroku runs dyno (like server) ==> put your code on , run your code, make it available to other people
2- Dyno : Heroku version of server (virtual machine)
3- Dyno runs flask app and uWSGI (is way of serving flask app)
4- Dyno run python app, flask app, uWSGI (interact with flask app to make it online and available to use)
5- Heroku app contains config properties like db config (postgresql, sqlite, mysql), and logging.
6- Heroku app can run many Dyno apps (services) at the same time.
7- db can be shared between Dynos
8- Heroku enables SSL (Secure Sockets Layer)
9- SSL : encrypted communication between the client and server(Heroku)

==============

CONFIG
1- at uwsgi
http-socket = :$(PORT)  =====> means get port number (var) from Heroku config

module = src/app:app  =====> means run app from app.py

Procfile: what Dyno we want to use in Heroku

Dyno is the server: Dyno connects to http port and listening to that port to receive incoming request


at Procfile :

        web: uwsgi uwsgi.ini ==> means run uwsgi process with file (uwsgi.ini)



=============================

for logs and troubleshooting install Heroku command cli
track logs in the console

1- heroku login
2- heroku logs --app={{app_name}}


module = src.run:application


############################
install postgresql on production that is because sqlite file is destroyed every time Dyno sleep